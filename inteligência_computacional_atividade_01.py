# -*- coding: utf-8 -*-
import numpy as np
from scipy.stats import pearsonr
from PIL import Image #https://github.com/python-pillow/Pillow
from sklearn.metrics import mean_squared_error
import random

from pathlib import Path

def get_files_recursive(dir_path_param):
  dir = Path(dir_path_param)
  files_dict = {}


  for p in dir.iterdir():
    if p.is_dir():
      p_list = []
      for f in p.iterdir():
        if f.is_file():
          p_list.append(f)
          files_dict[p.name] = p_list
  return files_dict

figuras = get_files_recursive("/content/drive/MyDrive/Mestrado UTFPR/fourShapes/")
folhas = get_files_recursive("/content/drive/MyDrive/Mestrado UTFPR/folhas/")

for key, value in figuras.items():
    print(f"Key: {key}, len: {len(value)}, Value: {value}")
for key, value in folhas.items():
    print(f"Key: {key}, len: {len(value)}, Value: {value}")


def pearson_correlation(image1, image2):
    # Carregar as imagens como arrays NumPy
    img1_array = np.array(image1)
    img2_array = np.array(image2)

    # Transformar as matrizes 2D das imagens em vetores 1D
    img1_vector = img1_array.flatten()
    img2_vector = img2_array.flatten()

    # Calcular o coeficiente de correlação de Pearson
    correlation = pearsonr(img1_vector, img2_vector)

    return correlation.statistic

def mse(image1, image2):

    img1_array = np.array(image1)
    img2_array = np.array(image2)

    img1_vector = img1_array.flatten()
    img2_vector = img2_array.flatten()

    mse = mean_squared_error(img1_vector, img2_vector)

    return mse



for key in figuras.keys():
  correlations = {}
  mse_results = {}
  c_list = []
  m_list = []

  figuras_classe = figuras[key]
  template_indice = random.randint(0, 9)
  intervalo = list(range(0, 9))
  intervalo.remove(template_indice)
  conjunto_indices = random.sample(intervalo, 3)


  print(f"classe {key}, template {template_indice} {figuras_classe[template_indice]}")
  template_img = Image.open(figuras_classe[template_indice])

  for i in conjunto_indices:
    c_result = {}
    m_result = {}

    image = Image.open(figuras_classe[i])
    correlation = pearson_correlation(template_img, image)
    mse_r = mse(template_img, image)
    c_result[figuras_classe[i]] = correlation
    m_result[figuras_classe[i]] = mse_r
    c_list.append(c_result)
    m_list.append(m_result)
    correlations.update({key : c_list})
    mse_results.update({key : m_list})

  sorted_correlations = sorted(correlations.items(), key=lambda x:x[1], reverse=True)
  sorted_mse_results = sorted(mse_results.items(), key=lambda x:x[1])
  print("pearson")
  for i in sorted_correlations:
    print(i)

  print("MSE")
  for i in sorted_mse_results:
    print(i)

figura1 = Image.open(figuras[0])
correlations = {}
mse_results = {}

for figura in figuras:
  figura2 = Image.open(figura)
  correlation = pearson_correlation(figura1, figura2)
  mse_r = mse(figura1,figura2)
  correlations.update({figura : correlation})
  mse_results.update({figura : mse_r})
  #print(correlation)

sorted_correlations = sorted(correlations.items(), key=lambda x:x[1], reverse=True)
sorted_mse_results = sorted(mse_results.items(), key=lambda x:x[1])

print("pearson")
for i in sorted_correlations:
  print(i)
#print(sorted_correlations)

print("MSE")
for i in sorted_mse_results:
  print(i)

"""Inteligência Computacional - Atividade 01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ao4nMvMM3NXzWh9lP8LmmgfnMDX1yhYV

[Atividade 01](https://docs.google.com/document/d/1MS7VMELifmCachXZah9KDwy-fkmDWxFZJJIGkS0tYUY/edit)

**Etapa A - Template Matching**

1.   Baixe a base “four shapes”  [aqui](https://www.dropbox.com/scl/fi/csk3cor9zln3fc957mf77/fourShapes.tar.gz?rlkey=3v44mpdt0qtsne56fzwkwwr5r&dl=0).
2.   Observe as diferenças e semelhanças entre as amostras das quatro classes ;
3.   Utilizando o Pearson Correlation Coefficient e Erro Quadrático Médio demonstre que as imagens são mais similares entre a mesma classe e menos similares entre classes diferentes;
    *   Escolha uma (1) imagem como “template” e três imagens da mesma classe como entradas ;
    *   Calcule Pearson e Erro Quadrárico Médio entre elas;
    *   Utilizando o mesmo “template”, selecione três imagens de cada uma das outras três classes. Repita o processo calculando o coeficiente de Pearson e Erro Quadrárico Médio entre elas;
4.   Descreva se os os menores coeficientes são referentes as amostras da mesma classe ou de classes diferentes.
5.   Descreva para cada uma das quatro classes, quais são as amostras mais similares.
"""

"""**Etapa B: Template Matching**

1.   Refaça os experimentos da Etapa A usando a base de folhas ([download](https://www.dropbox.com/s/fmbq1bpay5joaax/Folhas.zip?dl=0)) ;
2.   Selecione 3 imagens aleatórias de cada uma das 3 classes ;
3.   Utilizando o Pearson Correlation Coefficient e Erro Quadrático Médio demonstre que as imagens são mais similares entre a mesma classe e menos similares entre classes diferentes ;
  *   Escolha uma imagem como “template” e três imagens da mesma classe como entradas;
  *   Calcule Pearson E Erro Quadrárico Médio entre elas ;
4.  Utilizando o mesmo “template” e três imagens de cada uma das outras três classes. Repita o processo calculando o coeficiente de Pearson e Erro Quadrárico Médio entre elas ;

"""